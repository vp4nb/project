package com.bellinfo.exam.student.control;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.bellinfo.exam.model.ExamQuestion;
import com.bellinfo.exam.model.StudentSubject;
import com.bellinfo.exam.model.StudentSubjectTests;
import com.bellinfo.exam.model.UserOption;
import com.bellinfo.exam.model.StudentSubject;
import com.bellinfo.exam.student.service.ExamLoadingSerivice;
import com.bellinfo.exam.student.service.StudentService;
@Controller
public class ExamLoadingControl {

	@Autowired
	ExamQuestion examQue;
	@Autowired
	StudentService studentService;
	@Autowired
	StudentSubject studentSubject;
	@Autowired
	StudentSubjectTests studentSubjectTests;
	@Autowired
	ExamLoadingSerivice examLoadingService;
	@Autowired
	UserOption userOption;
	
	@RequestMapping(value="/write-exam/student/{studentId}", method=RequestMethod.GET)
	public String postExam(Model model, @PathVariable Integer studentId){
		model.addAttribute("subjectList", studentService.getSubject(studentId));
		return "write-exam";
	}
	
	@RequestMapping(value="/post-exam/student/{studentId}/subject/add", method=RequestMethod.GET)
	public String addExamSubject(Model model, @PathVariable Integer studentId){
		model.addAttribute("subjectList", studentService.getSubject(studentId));
		model.addAttribute("subject", studentSubject);
		return "add-exam-subject";
	}
	
	@RequestMapping(value="/post-exam/student/{studentId}/subject/add", method=RequestMethod.POST)
	public String addExamSubject(@Valid @ModelAttribute("subject") StudentSubject subject,BindingResult br,Model model, @PathVariable Integer studentId){
		if(br.hasErrors()){
			model.addAttribute("subjectList", studentService.getSubject(studentId));
			return "add-exam-subject";
		}
		try {
			studentService.saveSubject(subject);
			return postExam(model, studentId);
		} catch (Exception e) {
			model.addAttribute("message","subject already exist");
			model.addAttribute("subjectList", studentService.getSubject(studentId));
			return "add-exam-subject";
		}
	}
	
	@RequestMapping(value="/post-exam/student/{studentId}/subject/{subjectId}", method=RequestMethod.GET)
	public String examSubjectTests(Model model, @PathVariable Integer studentId, @PathVariable Integer subjectId){
		model.addAttribute("subject", studentService.getSubjectBySubjectId(subjectId));
		model.addAttribute("testList", studentService.getSubjectTests(subjectId));
		return "exam-subject-test";
	}
	
	
	
	@RequestMapping(value="/write-exam/student/{studentId}/subject/{subjectId}/test/{testNumber}/write", method=RequestMethod.GET)
	public String addQuery(Model model,@PathVariable Integer studentId, @PathVariable Integer subjectId, @PathVariable Integer testNumber){
		model.addAttribute("questionList", examLoadingService.getQuestionsList(testNumber));
		model.addAttribute("userOption", userOption);
		return "query-display";
	}
	
	@RequestMapping(value="/write-exam/student/{studentId}/subject/{subjectId}/test/{testNumber}/write", method=RequestMethod.POST)
	public String addQuery(@Valid @ModelAttribute("examQuestion") ExamQuestion examQuestion,BindingResult br,Model model,@PathVariable Integer studentId, @PathVariable Integer subjectId, @PathVariable Integer testNumber){
		if(br.hasErrors()){
			return "query-display";
		}
		
		return "post-query";
	}
}
